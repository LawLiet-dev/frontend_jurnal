function init() {
  // Initialize AOS if it exists
  if (typeof AOS !== 'undefined') {
    AOS.init();
  }

  // Handle active nav links
  document.addEventListener("DOMContentLoaded", function () {
    const currentUrl = window.location.href;
    const navLinks = document.querySelectorAll(".nav-link");
    
    navLinks.forEach((link) => {
      const href = link.getAttribute("href");
      if (href && currentUrl.includes(href)) {
        link.classList.add("active");
        
        const accordionContent = link.closest(".hs-accordion-content");
        if (accordionContent) {
          accordionContent.classList.remove("hidden");
          
          const previousElement = accordionContent.previousElementSibling;
          if (previousElement) {
            previousElement.classList.add("active");
          }
        }
      }
    });
  });

  // Handle navbar links
  const cleanUrl = window.location.href.split(/[?#]/)[0];
  const navbarLinks = document.querySelectorAll("#navbar .navbar-nav a");
  
  navbarLinks.forEach((link) => {
    if (link.href === cleanUrl) {
      link.classList.add("active");
      
      // Handle parent dropdown items
      const parentDropdown = link.closest(".hs-dropdown");
      if (parentDropdown) {
        const dropdownToggle = parentDropdown.querySelector(".hs-dropdown-toggle");
        if (dropdownToggle) {
          dropdownToggle.classList.add("active");
        }
      }

      // Handle nested parent items
      const checkParentNavItem = (element) => {
        const parent = element?.parentElement?.parentElement?.parentElement?.parentElement?.parentElement;
        if (parent?.classList.contains("nav-item")) {
          const toggle = parent.querySelector(".hs-dropdown-toggle");
          if (toggle) {
            toggle.classList.add("active");
          }
        }
        return parent;
      };

      const firstParent = checkParentNavItem(link);
      if (firstParent) {
        checkParentNavItem(firstParent);
      }
    }
  });

  // Handle sticky navbar
  const handleScroll = () => {
    const navbar = document.getElementById("navbar");
    if (navbar) {
      const scrollPosition = document.documentElement.scrollTop || document.body.scrollTop;
      if (scrollPosition >= 75) {
        navbar.classList.add("nav-sticky");
      } else {
        navbar.classList.remove("nav-sticky");
      }
    }
  };

  window.addEventListener("scroll", handleScroll);

  // Handle back to top button
  const backToTop = document.querySelector('[data-toggle="back-to-top"]');
  if (backToTop) {
    window.addEventListener("scroll", function () {
      if (window.pageYOffset > 72) {
        backToTop.classList.add("flex");
        backToTop.classList.remove("hidden");
      } else {
        backToTop.classList.remove("flex");
        backToTop.classList.add("hidden");
      }
    });

    backToTop.addEventListener("click", function (e) {
      e.preventDefault();
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    });
  }

  // Initialize Swiper if it exists
  if (typeof Swiper !== 'undefined') {
    // Swiper One
    const swiperOneElement = document.getElementById("swiper_one");
    if (swiperOneElement) {
      new Swiper("#swiper_one", {
        slidesPerView: 1,
        spaceBetween: 30,
        loop: true,
        autoplay: {
          delay: 2500,
          disableOnInteraction: false,
        },
        pagination: {
          el: ".swiper-pagination",
          clickable: true,
        },
        rewind: true,
        navigation: {
          nextEl: ".button-next",
          prevEl: ".button-prev",
        },
        breakpoints: {
          320: {
            slidesPerView: 1,
          },
        },
      });
    }

    // Swiper Two
    const swiperTwoElement = document.getElementById("swiper_two");
    if (swiperTwoElement) {
      new Swiper("#swiper_two", {
        slidesPerView: 1,
        loop: true,
        autoHeight: true,
        spaceBetween: 30,
        navigation: {
          nextEl: ".button-next",
          prevEl: ".button-prev",
        },
        breakpoints: {
          576: {
            slidesPerView: 1,
          },
          768: {
            slidesPerView: 2,
          },
        },
      });
    }
  }

  // Typewriter effect
  class TypeWriter {
    constructor(el, toRotate, period) {
      this.toRotate = toRotate;
      this.el = el;
      this.loopNum = 0;
      this.period = parseInt(period, 10) || 2000;
      this.txt = '';
      this.isDeleting = false;
      this.tick();
    }

    tick() {
      const i = this.loopNum % this.toRotate.length;
      const fullTxt = this.toRotate[i];

      if (this.isDeleting) {
        this.txt = fullTxt.substring(0, this.txt.length - 1);
      } else {
        this.txt = fullTxt.substring(0, this.txt.length + 1);
      }

      this.el.innerHTML = `<span class="wrap">${this.txt}</span>`;

      let delta = 200 - Math.random() * 100;
      if (this.isDeleting) { delta /= 2; }

      if (!this.isDeleting && this.txt === fullTxt) {
        delta = this.period;
        this.isDeleting = true;
      } else if (this.isDeleting && this.txt === '') {
        this.isDeleting = false;
        this.loopNum++;
        delta = 500;
      }

      setTimeout(() => this.tick(), delta);
    }
  }

  // Initialize typewriter elements
  const typewriterElements = document.getElementsByClassName("typewrite");
  for (let i = 0; i < typewriterElements.length; i++) {
    const element = typewriterElements[i];
    const dataType = element.getAttribute("data-type");
    const dataPeriod = element.getAttribute("data-period");
    
    if (dataType) {
      new TypeWriter(element, JSON.parse(dataType), dataPeriod);
    }
  }
}

// Call init when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}